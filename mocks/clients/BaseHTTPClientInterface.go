// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// BaseHTTPClientInterface is an autogenerated mock type for the BaseHTTPClientInterface type
type BaseHTTPClientInterface struct {
	mock.Mock
}

// BasicAuth provides a mock function with given fields: username, password
func (_m *BaseHTTPClientInterface) BasicAuth(username string, password string) string {
	ret := _m.Called(username, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Get provides a mock function with given fields: _a0, _a1, _a2
func (_m *BaseHTTPClientInterface) Get(_a0 string, _a1 map[string]string, _a2 map[string]string) ([]byte, int, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []byte
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(string, map[string]string, map[string]string) ([]byte, int, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]string, map[string]string) []byte); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, map[string]string, map[string]string) int); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string, map[string]string, map[string]string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetClientID provides a mock function with given fields:
func (_m *BaseHTTPClientInterface) GetClientID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetClientSecret provides a mock function with given fields:
func (_m *BaseHTTPClientInterface) GetClientSecret() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetOAuthToken provides a mock function with given fields:
func (_m *BaseHTTPClientInterface) GetOAuthToken() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Post provides a mock function with given fields: _a0, _a1, _a2
func (_m *BaseHTTPClientInterface) Post(_a0 string, _a1 interface{}, _a2 map[string]string) ([]byte, int, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []byte
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(string, interface{}, map[string]string) ([]byte, int, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}, map[string]string) []byte); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}, map[string]string) int); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string, interface{}, map[string]string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Put provides a mock function with given fields: _a0, _a1, _a2
func (_m *BaseHTTPClientInterface) Put(_a0 string, _a1 interface{}, _a2 map[string]string) ([]byte, int, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []byte
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(string, interface{}, map[string]string) ([]byte, int, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}, map[string]string) []byte); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}, map[string]string) int); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string, interface{}, map[string]string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Request provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *BaseHTTPClientInterface) Request(_a0 string, _a1 string, _a2 interface{}, _a3 map[string]string) ([]byte, int, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []byte
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}, map[string]string) ([]byte, int, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(string, string, interface{}, map[string]string) []byte); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, interface{}, map[string]string) int); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string, string, interface{}, map[string]string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetBaseURL provides a mock function with given fields: baseURL
func (_m *BaseHTTPClientInterface) SetBaseURL(baseURL string) {
	_m.Called(baseURL)
}

// SetOauthToken provides a mock function with given fields: token
func (_m *BaseHTTPClientInterface) SetOauthToken(token string) {
	_m.Called(token)
}

type mockConstructorTestingTNewBaseHTTPClientInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewBaseHTTPClientInterface creates a new instance of BaseHTTPClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBaseHTTPClientInterface(t mockConstructorTestingTNewBaseHTTPClientInterface) *BaseHTTPClientInterface {
	mock := &BaseHTTPClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
