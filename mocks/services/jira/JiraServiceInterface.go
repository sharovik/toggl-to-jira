// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// JiraServiceInterface is an autogenerated mock type for the JiraServiceInterface type
type JiraServiceInterface struct {
	mock.Mock
}

// ParseTaskKey provides a mock function with given fields: text
func (_m *JiraServiceInterface) ParseTaskKey(text string) (string, error) {
	ret := _m.Called(text)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(text)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(text)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTheTime provides a mock function with given fields: taskKey, timeStr, date
func (_m *JiraServiceInterface) SendTheTime(taskKey string, timeStr string, date time.Time) error {
	ret := _m.Called(taskKey, timeStr, date)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, time.Time) error); ok {
		r0 = rf(taskKey, timeStr, date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewJiraServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewJiraServiceInterface creates a new instance of JiraServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJiraServiceInterface(t mockConstructorTestingTNewJiraServiceInterface) *JiraServiceInterface {
	mock := &JiraServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
